-- lua5.3 usable "&" "<<" ">>"

G_wrapper_table = {
	{emulator = "mame",				w_gui_text = function(v1, v2, msg, color, alpha) return G_scr:draw_text(v1, v2, msg, color + w_lshift(alpha, 24)) end,														w_ru8 = function(v1, v2) return G_mem:read_u8(v1) end,				w_rs8 = function(v1, v2) return G_mem:read_i8(v1) end,					w_ru16 = function(v1, v2) return G_mem:read_u16(v1) end,				w_rs16 = function(v1, v2) return G_mem:read_i16(v1) end,											w_ru32 = function(v1, v2) return G_mem:read_u32(v1) end,				w_rs32 = function(v1, v2) return G_mem:read_i32(v1) end,										w_wu8 = function(v1, v2, v3) return G_mem:write_u8(v1, v2) end,				w_wu16 = function(v1, v2, v3) return G_mem:write_u16(v1, v2) end,				w_wu32 = function(v1, v2, v3) return G_mem:write_u32(v1, v2) end,					w_and = function(v1, v2) return (v1 & v2) end,			w_lshift = function(v1, v2) return (v1 << v2) end,			w_rshift = function(v1, v2) return (v1 >> v2) end,	w_gui_drawline = function(v1, v2, v3, v4, color, alpha) return G_scr:draw_line(v1, v2, v3, v4, color + w_lshift(alpha, 24)) end,																														w_gui_drawbox = function(v1, v2, v3, v4, color, fill_a, outline_a) return G_scr:draw_box(v1, v2, v3, v4, color + w_lshift(fill_a, 24), color + w_lshift(outline_a, 24)) end,																																													w_scr_width = function() return G_scr:width() end,			w_scr_height = function() return G_scr:height() end,		w_input_pressed = function(key) return G_inp:code_pressed(G_inp:code_from_token("KEYCODE_" .. key)) end,		w_emu_framecount = function() return G_scr:frame_number() end,				w_emu_pause = function() return emu.pause() end,					w_emu_paused = function() return manager:machine().paused end,		w_read_pc = function() return G_cpu.state["PC"].value end,		w_unique = function() return emu.romname() end	},
	{emulator = "pcsx2rrlua",		w_gui_text = function(v1, v2, msg, color, alpha) return gui.text(v1, v2, msg, w_and(w_rshift(color, 16), 0xFF), w_and(w_rshift(color, 8), 0xFF), w_and(color, 0xFF)) end,	w_ru8 = function(v1, v2) return memory.readbyte(v1, "r5900") end,	w_rs8 = function(v1, v2) return memory.readbytesigned(v1, "r5900") end,	w_ru16 = function(v1, v2) return memory.readword(v1, "r5900") end,		w_rs16 = function(v1, v2) return ToSignedByForce(memory.readwordsigned(v1, "r5900"), 2) end,		w_ru32 = function(v1, v2) return memory.readdword(v1, "r5900") end,		w_rs32 = function(v1, v2) return ToSignedByForce(memory.readdwordsigned(v1, "r5900"), 4) end,	w_wu8 = function(v1, v2, v3) return memory.writebyte(v1, v2, "r5900") end,	w_wu16 = function(v1, v2, v3) return not_exist_API() end,						w_wu32 = function(v1, v2, v3) return memory.writedword(v1, v2, "r5900") end,		w_and = function(v1, v2) return (v1 & v2) end,			w_lshift = function(v1, v2) return (v1 << v2) end,			w_rshift = function(v1, v2) return (v1 >> v2) end,	w_gui_drawline = function(v1, v2, v3, v4, color, alpha) return gui.drawLine(math.floor(v1), math.floor(v2), math.floor(v3), math.floor(v4), w_and(w_rshift(color, 16), 0xFF), w_and(w_rshift(color, 8), 0xFF), w_and(color, 0xFF), alpha) end,			w_gui_drawbox = function(v1, v2, v3, v4, color, fill_a, outline_a) return gui.box(math.floor(v1), math.floor(v2), math.floor(v3), math.floor(v4), w_and(w_rshift(color, 16), 0xFF), w_and(w_rshift(color, 8), 0xFF), w_and(color, 0xFF), outline_a, w_and(w_rshift(color, 16), 0xFF), w_and(w_rshift(color, 8), 0xFF), w_and(color, 0xFF), fill_a) end	,		w_scr_width = function() return 640 end,					w_scr_height = function() return 480 end,					w_input_pressed = function(key) return not_exist_API() end,														w_emu_framecount = function() return emu.framecount() end,					w_emu_pause = function() return emu.pause() end,					w_emu_paused = function() return --[[return not_exist_API()]] end,	w_read_pc = function() return  not_exist_API() end,				w_unique = function() return "PS2" end			},
}
