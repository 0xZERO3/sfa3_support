G_wrapper_table = {
	{emulator = "mamerr",			w_gui_text = function(v1, v2, msg, color, alpha) return gui.text(v1, v2, msg, w_lshift(color, 8) + alpha) end,				w_ru8 = function(v1, v2) return memory.readbyte(v1) end,		w_rs8 = function(v1, v2) return memory.readbytesigned(v1) end,	w_ru16 = function(v1, v2) return memory.readword(v1) end,																								w_rs16 = function(v1, v2) return memory.readwordsigned(v1) end,																							w_ru32 = function(v1, v2) return memory.readdword(v1) end,																								w_rs32 = function(v1, v2) return memory.readdwordsigned(v1) end,																							w_wu8 = function(v1, v2, v3) return memory.writebyte(v1, v2) end,		w_wu16 = function(v1, v2, v3) return memory.writeword(v1, v2) end,																						w_wu32 = function(v1, v2, v3) return memory.writedword(v1, v2) end,																						w_and = function(v1, v2) return bit.band(v1, v2) end,	w_lshift = function(v1, v2) return bit.lshift(v1, v2) end,	w_rshift = function(v1, v2) return bit.rshift(v1, v2) end,		w_gui_drawline = function(v1, v2, v3, v4, color, alpha) return gui.drawline(v1, v2, v3, v4, w_lshift(color, 8) + alpha)  end,			w_gui_drawbox = function(v1, v2, v3, v4, color, fill_a, outline_a) return gui.drawbox(v1, v2, v3, v4, w_lshift(color, 8) + fill_a, w_lshift(color, 8) + outline_a) end	,			w_scr_width = function() return emu.screenwidth() end,		w_scr_height = function() return emu.screenheight() end,	w_input_pressed = function(key) return input.get()[key] end,		w_emu_framecount = function() return emu.framecount() end,		w_emu_pause = function() return emu.pause() end,		w_emu_paused = function() --[[return not_exist_API()]] end,		w_read_pc = function() return  not_exist_API() end,							w_unique = function() return emu.romname() end			},
	{emulator = "fbarr",			w_gui_text = function(v1, v2, msg, color, alpha) return gui.text(v1, v2, msg, w_lshift(color, 8) + alpha) end,				w_ru8 = function(v1, v2) return memory.readbyte(v1) end,		w_rs8 = function(v1, v2) return memory.readbytesigned(v1) end,	w_ru16 = function(v1, v2) return memory.readword(v1) end,																								w_rs16 = function(v1, v2) return memory.readwordsigned(v1) end,																							w_ru32 = function(v1, v2) return memory.readdword(v1) end,																								w_rs32 = function(v1, v2) return memory.readdwordsigned(v1) end,																							w_wu8 = function(v1, v2, v3) return memory.writebyte(v1, v2) end,		w_wu16 = function(v1, v2, v3) return memory.writeword(v1, v2) end,																						w_wu32 = function(v1, v2, v3) return memory.writedword(v1, v2) end,																						w_and = function(v1, v2) return bit.band(v1, v2) end,	w_lshift = function(v1, v2) return bit.lshift(v1, v2) end,	w_rshift = function(v1, v2) return bit.rshift(v1, v2) end,		w_gui_drawline = function(v1, v2, v3, v4, color, alpha) return gui.drawline(v1, v2, v3, v4, w_lshift(color, 8) + alpha)  end,			w_gui_drawbox = function(v1, v2, v3, v4, color, fill_a, outline_a) return gui.drawbox(v1, v2, v3, v4, w_lshift(color, 8) + fill_a, w_lshift(color, 8) + outline_a) end	,			w_scr_width = function() return emu.screenwidth() end,		w_scr_height = function() return emu.screenheight() end,	w_input_pressed = function(key) return input.get()[key] end,		w_emu_framecount = function() return emu.framecount() end,		w_emu_pause = function() return emu.pause() end,		w_emu_paused = function() --[[return not_exist_API()]] end,		w_read_pc = function() return  memory.getregister("m68000.pc") end,			w_unique = function() return emu.romname() end			},
	{emulator = "fcfbneo",			w_gui_text = function(v1, v2, msg, color, alpha) return gui.text(v1, v2, msg, w_lshift(color, 8) + alpha) end,				w_ru8 = function(v1, v2) return memory.readbyte(v1) end,		w_rs8 = function(v1, v2) return memory.readbytesigned(v1) end,	w_ru16 = function(v1, v2) return memory.readword(v1) end,																								w_rs16 = function(v1, v2) return memory.readwordsigned(v1) end,																							w_ru32 = function(v1, v2) return memory.readdword(v1) end,																								w_rs32 = function(v1, v2) return memory.readdwordsigned(v1) end,																							w_wu8 = function(v1, v2, v3) return memory.writebyte(v1, v2) end,		w_wu16 = function(v1, v2, v3) return memory.writeword(v1, v2) end,																						w_wu32 = function(v1, v2, v3) return memory.writedword(v1, v2) end,																						w_and = function(v1, v2) return bit.band(v1, v2) end,	w_lshift = function(v1, v2) return bit.lshift(v1, v2) end,	w_rshift = function(v1, v2) return bit.rshift(v1, v2) end,		w_gui_drawline = function(v1, v2, v3, v4, color, alpha) return gui.drawline(v1, v2, v3, v4, w_lshift(color, 8) + alpha)  end,			w_gui_drawbox = function(v1, v2, v3, v4, color, fill_a, outline_a) return gui.drawbox(v1, v2, v3, v4, w_lshift(color, 8) + fill_a, w_lshift(color, 8) + outline_a) end	,			w_scr_width = function() return emu.screenwidth() end,		w_scr_height = function() return emu.screenheight() end,	w_input_pressed = function(key) return input.get()[key] end,		w_emu_framecount = function() return emu.framecount() end,		w_emu_pause = function() return emu.pause() end,		w_emu_paused = function() --[[return not_exist_API()]] end,		w_read_pc = function() return  0x00000000 end,								w_unique = function() return emu.romname() end			},
	{emulator = "psxjin",			w_gui_text = function(v1, v2, msg, color, alpha) return gui.text(v1, v2, msg, color + w_lshift(alpha, 24)) end,				w_ru8 = function(v1, v2) return memory.readbyte(v1) end,		w_rs8 = function(v1, v2) return memory.readbytesigned(v1) end,	w_ru16 = function(v1, v2) return memory.readword(v1) end,																								w_rs16 = function(v1, v2) return memory.readwordsigned(v1) end,																							w_ru32 = function(v1, v2) return memory.readdword(v1) end,																								w_rs32 = function(v1, v2) return memory.readdwordsigned(v1) end,																							w_wu8 = function(v1, v2, v3) return memory.writebyte(v1, v2) end,		w_wu16 = function(v1, v2, v3) return memory.writeword(v1, v2) end,																						w_wu32 = function(v1, v2, v3) return memory.writedword(v1, v2) end,																						w_and = function(v1, v2) return bit.band(v1, v2) end,	w_lshift = function(v1, v2) return bit.lshift(v1, v2) end,	w_rshift = function(v1, v2) return bit.rshift(v1, v2) end,		w_gui_drawline = function(v1, v2, v3, v4, color, alpha) return gui.drawline(v1, v2, v3, v4, w_lshift(color, 8) + alpha)  end,			w_gui_drawbox = function(v1, v2, v3, v4, color, fill_a, outline_a) return gui.drawbox(v1, v2, v3, v4, w_lshift(color, 8) + fill_a, w_lshift(color, 8) + outline_a) end	,			w_scr_width = function() return 320 end,					w_scr_height = function() return 240 end,					w_input_pressed = function(key) return not_exist_API() end,			w_emu_framecount = function() return emu.framecount() end,		w_emu_pause = function() return emu.pause() end,		w_emu_paused = function() --[[return not_exist_API()]] end,		w_read_pc = function() return  not_exist_API() end,							w_unique = function() return "PSX" end					},
	{emulator = "vbarr",			w_gui_text = function(v1, v2, msg, color, alpha) return gui.text(v1, v2, msg, color + w_lshift(alpha, 24)) end,				w_ru8 = function(v1, v2) return memory.readbyte(v1) end,		w_rs8 = function(v1, v2) return memory.readbytesigned(v1) end,	w_ru16 = function(v1, v2) return memory.readword(v1) end,																								w_rs16 = function(v1, v2) return memory.readwordsigned(v1) end,																							w_ru32 = function(v1, v2) return memory.readdword(v1) end,																								w_rs32 = function(v1, v2) return memory.readdwordsigned(v1) end,																							w_wu8 = function(v1, v2, v3) return memory.writebyte(v1, v2) end,		w_wu16 = function(v1, v2, v3) return memory.writeword(v1, v2) end,																						w_wu32 = function(v1, v2, v3) return memory.writedword(v1, v2) end,																						w_and = function(v1, v2) return bit.band(v1, v2) end,	w_lshift = function(v1, v2) return bit.lshift(v1, v2) end,	w_rshift = function(v1, v2) return bit.rshift(v1, v2) end,		w_gui_drawline = function(v1, v2, v3, v4, color, alpha) return gui.drawline(v1, v2, v3, v4, w_lshift(color, 8) + alpha)  end,			w_gui_drawbox = function(v1, v2, v3, v4, color, fill_a, outline_a) return gui.drawbox(v1, v2, v3, v4, w_lshift(color, 8) + fill_a, w_lshift(color, 8) + outline_a) end	,			w_scr_width = function() return 256 end,					w_scr_height = function() return 224 end,					w_input_pressed = function(key) return not_exist_API() end,			w_emu_framecount = function() return emu.framecount() end,		w_emu_pause = function() return emu.pause() end,		w_emu_paused = function() --[[return not_exist_API()]] end,		w_read_pc = function() return  not_exist_API() end,							w_unique = function() return "GBA" end					},
	{emulator = "bizhawk",			w_gui_text = function(v1, v2, msg, color, alpha) return gui.text(v1, v2, msg, color + w_lshift(alpha, 24)) end,				w_ru8 = function(v1, v2) return memory.read_u8(v1, v2) end,		w_rs8 = function(v1, v2) return memory.read_s8(v1, v2) end,		w_ru16 = function(v1, v2) if w_unique() == "SAT" then return byteswap(memory.read_u16_le(v1, v2), 2) else return memory.read_u16_le(v1, v2) end end,	w_rs16 = function(v1, v2) if w_unique() == "SAT" then return byteswap(memory.read_s16_le(v1, v2), 2) else return memory.read_s16_le(v1, v2) end end,	w_ru32 = function(v1, v2) if w_unique() == "SAT" then return byteswap(memory.read_u32_le(v1, v2), 4) else return memory.read_u32_le(v1, v2) end end,	w_rs32 = function(v1, v2) if w_unique() == "SAT" then return byteswap(memory.read_s32_le(v1, v2), 4) else return memory.read_s32_le(v1, v2) end end,		w_wu8 = function(v1, v2, v3) return memory.write_u8(v1, v2, v3) end,	w_wu16 = function(v1, v2, v3) if w_unique() == "SAT" then return memory.write_u16_le(v1, v2, v3) else return memory.write_u16_le(v1, v2, v3) end end,	w_wu32 = function(v1, v2, v3) if w_unique() == "SAT" then return memory.write_u32_le(v1, v2, v3) else return memory.write_u32_le(v1, v2, v3) end end,	w_and = function(v1, v2) return bit.band(v1, v2) end,	w_lshift = function(v1, v2) return bit.lshift(v1, v2) end,	w_rshift = function(v1, v2) return bit.rshift(v1, v2) end,		w_gui_drawline = function(v1, v2, v3, v4, color, alpha) return gui.drawLine(v1, v2, v3, v4, color + w_lshift(alpha, 24)) end,			w_gui_drawbox = function(v1, v2, v3, v4, color, fill_a, outline_a) return gui.drawBox(v1, v2, v3, v4, color + w_lshift(outline_a, 24), color + w_lshift(fill_a, 24)) end	,		w_scr_width = function() return client.bufferwidth() end,	w_scr_height = function() return client.bufferheight() end,	w_input_pressed = function(key) return not_exist_API() end,			w_emu_framecount = function() return emu.framecount() end,		w_emu_pause = function() return emu.pause() end,		w_emu_paused = function() --[[return not_exist_API()]] end,		w_read_pc = function() return  not_exist_API() end,							w_unique = function() return emu.getsystemid() end		},
}
